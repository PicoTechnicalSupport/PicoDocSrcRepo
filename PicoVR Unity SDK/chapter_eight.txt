.. _8   Advanced Features:

8   Advanced Features
==================================

8.1 Display Frame Rate
--------------------------------------

To show the frame rate, navigate to the **Inspector** panel of the Pvr_UnitySDK and enable **Show FPS in Scene** under the **Pvr_Unity SDK Manager** component.

.. image:: _static/7.1.png

Figure 8.1 Enabling the frame rate metric

8.2 Open Screen Fade of the Scenes
--------------------------------------

The SDK provides a scene switch gradient effect through the **Screen Fade** option:

.. image:: _static/7.2.png

Figure 8.2 Location of the Screen Fade option

The duration and color of the scene switching gradient are controlled by the **Fade Time** (in seconds) and **Fade Color** options respectively:

.. image:: _static/7.3.png

Figure 8.3 Screen Fade Time and Color of Scenes (time unit is S)


8.3 Limited Frame Rate
--------------------------------------

The SDK provides an option to set the framerate:

.. image:: _static/7.4.png

Figure 8.4 Option to set the frame rate


Disable **Use Default FPS** and then enter the desired frame rate.

8.4 Configure the Size of EyeBuffer
--------------------------------------

The SDK provides the option to configure the size of the **Eyebuffer**, which is opened by unchecking the **Use Default RenderTexture** option as follows:

.. image:: _static/7.5.png

Figure 8.5 - Configuring the Render Texture Size

**Tips**:
Developers should only use **Use Default RenderTexture** for custom render texture sizes for special needs. Developers should take the following into consideration:

* If the render texture setting is too small, performance will improve and latency will be reduced, but it will also result in a lower resolution.
* If the render texture setting is too large, performance will be reduced and latency will be increased. It’s not recommended that the render texture setting exceed the texture size for the hardware.


8.5	Custom Application Launch Animation
-------------------------------------------

The SDK provides a function to customize your application so that it launches an animation. Click **Pvr_UnitySDK** > **Splash Screen** to open the **Splash Screen** editing interface, as shown in the Figure 8.5:

.. image:: _static/7.6.png

Figure 8.6 Splash Screen Option.

**SplashScreenType** can be set to the following values corresponding to a different application startup animation:

* **UseUnitySplashScreen**: The application startup animation uses the startup animation set in **Unity PlayerSetting** > **Splash Image**.
* **UsePicoSplashScreen**: The application startup animation uses the default startup animation provided by the Pico SDK.
* **UseDynamicSplashScreen**: When enabled, displays the Splash Screen interface with the following options:

.. image:: _static/7.7.png

Figure 8.7 Splash Screen Interface.

 - **SplashImage**: An array of frame animation files to use when the application starts. The order of the frame animation files in the array should correspond to the order of playback, and the image pixel size should be less than 1080x720.
 - **Inside_background**: The background image of the application launch animation. The image pixel size should be less than 1080x720.
 - **Use Splash Text**: When enabled, displays the following options to specify the text and formatting to use when the application starts:

 .. image:: _static/7.8.png

 Figure 8.8 Use Splash Text Options.

  * **Default Text**: The default startup text to display if no localized strings are specified in the LanguageLocalization option(s) that correspond to the current system language selected.
  * **LanguageLocalization**: Specifies the localized text to display for different languages. When the application starts, it will select which startup text to display based on the system language of the device. If the current system language is not included in **LanguageLocalization**, the **Default Text** will be displayed.
  * **FontSize**: Sets the text size. 
  * **FontColor**: Set the text color.
  * **TextHeight**: Sets the distance, in pixels, from the start of the text to the bottom of the screen.
  * **Use Carousel**: When enabled, the startup will be scrolled if it is too long,  
  * **Alignment**: Sets the alignment of the text.

After selecting the type, click **OK** to set the configuration; a log message indicating **Congratulations** appears when the configuration is complete. 

8.6	Foveated Rendering
--------------------------------------

Foveated rendering optimizes the ability to render scenes, providing a high resolution for the center of the field of view, while the details of the scene for peripheral views are greatly reduced. The following properties for foveated rendering can be in the Pvr_UnitySDK under **LeftEye** and **RightEye**:

* **Foveation Level**: Sets low, medium, or high levels of Foveation.
* **Foveation Gain Value**: A Vector2 value that reduces the rate of peripheral pixels in the X/Y axes. Larger values provide greater reductions.
* **Foveation Area Value**: A float value centered on the gaze point, that defines the radius of the foveation area in which the resolution is not reduced.
* **Foveation Minimum Value**: A float value defining the texture coordinate parameter of the texture filter function.

 .. image:: _static/7.9.png

 Figure 8.9 Foveated Rendering Options

8.7	VR Compositor Layers
--------------------------------------

Normally, scene content will be directly rendered to the "eye buffer", and then the "eye buffer" will be sampled by the ATW, and finally rendered onto the VR screen.

The compositor layers *synthesis layer* (also known as "transmission layer") technology provides a rendering method that is different from "rendering scene content directly into the eye buffer". With the synthesis layer, this method does not need to render the content to the "eye buffer". Instead it directly renders the content to ATW “transparently”, for sampling and synthesis processing. This avoids the texture sampling process (rendering the content onto the “eye buffer”), which significantly improves the sharpness of the texture and video.

Compositor layers supports up to 15 layers (no more than 15 layers will be displayed) and two "transparent" texture types: 

* Standard Texture: Standard 2D texture .
* Equirectangular Texture: Panorama (360°) texture.

The transparent layer function is provided by the ``Pvr_UnitySDKEyeOverlay.cs`` script. The related properties are set as follows: 

 .. image:: _static/7.10.png

 Figure 8.10 Overlay Image

Related property settings:

* **Layer Index**: Sets the rendering priority (smaller value means higher priority for rendering).

* **Image Type**: Specifies the texture type. Can be set to:

 - Standard 2D texture (Standard Texture)

 - 360 panoramic texture (Equirectangular Texture)

* **Textures**: Specifies the texture resources for the left and right eyes: **Left Texture** and **Right Texture**.

8.7.1	Standard 2D Texture
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To allow developers to quickly get up and running with the 2D texture pass-through function, the SDK provides the **2DOverlay** example. You can directly package and install it on the device to see the results. Note that the editor cannot show this functionality.

Follow these steps to apply the feature to your project:

1.	Open Unity, create an empty scene, drag **Pvr_UnitySDK.prefab** in the **PicoMobileSDK** > **Pvr_UnitySDK** > **Prefabs** > folder into the empty scene, and delete the **Main Camera** object. 

 .. image:: _static/7.11.png

Figure 8.11 Dragging the Prefab


2.	Create a Quad in the scene, name it **OverlayTransform**, and adjust the position of the Quad so that it is in the visible position of the Camera:

 .. image:: _static/7.12.png

Figure 8.12 Creating a Quad

3.	After determining the display position, uncheck the **Mesh Render** and **Mesh Collider** components on the Inspector view panel:

 .. image:: _static/7.13.png

Figure 8.13 Disabling the Mesh Collider and Mesh Renderer Components

**Tip**: The Transmit Layer will use the Quad's Transform information: position, rotation, scale.

4.	Bind the **Pvr_UnitySDKEyeOverlay.cs** script to the Quad created in the previous step and adjust its property parameters on the inspector.

 .. image:: _static/7.14.png

Figure 8.14 Bind Script

 * **Layer Index**: Sets the rendering priority (smaller value means higher priority for rendering).
 * **Image Type**: Sets the **StandardTexture** type.
 * **Textures**: Specifies the 2D texture to be transparently transmitted

 **Tips**: 

 * Specify the same texture for the left and right eyes, otherwise different content can cause dizziness.
 * Developers who need to dynamically modify passthrough 2D textures, can call the **SetTexture** (Texture Texture) interface in the **Pvr_UnitySDKEyeOverlay.cs** script.

5.	Package and install to the device see the result. 

 .. image:: _static/7.15.png

Figure 8.15 The Running Result


8.7.2	360 Degree Panorama Texture
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Follow the steps below steps to achieve a 360-degree panoramic view: 

1.	Create a sphere model in the scene.
2.	Create a **360 Degree Panorama Texture** material and assign it to the sphere model, then modify the shader to remove the front rendering Cull Front.
3.	Place the **Camera** in the center of the sphere.
4.	For the **transmission layer** function:

 1.	Create an empty object in the scene and bind the **Pvr_UnitySDKEyeOverlay.cs** script.

 2.	Set the **ImageType** to the **Equirectangular Texture** type and specify a "360 Panorama Texture".

To allow developers to quickly get up and running with the 360-degree panoramic texture functionality, the SDK provides the **360Overlay** example. You can directly package and install it on the device to see the results. Note that the editor cannot show this functionality.

Follow the steps below to apply the feature to your project:

1.	See steps 1 and 2 in the standard 2D texture section above.
2.	Create an empty object in the scene, name it **360OverlayTransform**, and bind the **Pvr_UnitySDKEyeOverlay.cs** script:

 .. image:: _static/7.16.png

Figure 8.16 The Creating an empty object

3.	Set property parameters on the script inspector:

 .. image:: _static/7.17.png

Figure 8.17 Setting the property parameters

 - **Image Type**: Select the **Equirectangular Texture** type.
 - **Textures**: Set to the same 360 panorama texture for the left and right eyes.

 **Tip**: The **Equirectangular Texture** type does not need to set the **LayerIndex** to specify the rendering priority, and the default is to render first.

4.	Package and install it on the device to see the results.

 .. image:: _static/7.18.png

Figure 8.18 The Running Result.


8.7.3	Head-Locked and World-Locked Mode
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

By default, the "transmission layer" is **Word-Locked** mode. If you want to implement **Head-Locked** mode, create an empty transform under the **Head** node and bind the **Pvr_UnitySDKEyeOverlay.cs** script:

 .. image:: _static/7.19.png

Figure 8.19 Setting Head-Locked mode


8.8	Monocular camera
--------------------------

A binocular camera provides a separate image for each eye from different angles, allowing an object to appear more realistic.

A monocular camera uses a single image to render to both eyes, which effectively reduces the amount of rendering required. To enable a monocular camera, enable **Use Monoscopic**, otherwise a binocular camera will be used.

 .. image:: _static/7.20.png

Figure 8.20 Enabling a Monocular Camera


8.9     Entering Developer Mode
--------------------------------------

Follow the steps below to enter into developer mode on the respective devices.

8.9.1	Pico Neo
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.	Navigate to **Settings** in the headset and click **About**. 
2.	Click on the top item, **PUI Version**, 8 times. The development menu option will now appear on the right. 
3.	Click on **Developer Options** in the **Developer Mode** menu. 
4.	Select **USB configuration** at the end of the **Networking** section, and reset it to **MTP (Media Transfer Protocol)**. This is necessary for your computer to access the device's files.

8.9.2	Goblin, Goblin2 and Goblin2 4K
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.	Press **Confirm** and **Volume Down** together to enter the **2D Settings** menu. **Developer Options** should appear at the bottom under **System**. If it does not, then select **About Device**, and click **PUI Version** 8 times.
2.	Navigate back to the **2D Settings** menu and you should now see **Developer Options** appear at the bottom under System.
3.	Click on **Developer Options**.
4.	Select **USB configuration** at the end of the **Networking** section, and reset it to **MTP (Media Transfer Protocol)**. This is necessary for your computer to access the device's files.


8.10	Android Manifest File
--------------------------------------

This SDK includes a pre-populated ``AndroidManifest.xml`` file. If your project doesn’t already have an ``AndroidManifest.xml`` file, you can use the file from this SDK directly. If your project already has an ``AndroidMaifest.xml`` file, consolidate the following elements into your file:

8.10.1	Pico VR All-in-one Projects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add the following ``meta-data`` elements to ensure the project displays correctly:

.. code-block:: xml

	<meta-data android:name="com.picovr.type" android:value="vr"/> 
	<meta-data android:name="com.picovr.display.orientation"   android:value="180"/>

**Note**: All Activities that render must inherit from: ``com.unity3d.player.UnityPlayerNativeActivityPico``.

8.10.2	VR Box Bluetooth Projects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For projects that use VR Box Bluetooth controls, add the following service definitions and permissions:

.. code-block:: xml

	<service android:name="com.picovr.picovrlib.service.LarkConnectService"  /> 
	<service android:name="com.picovr.picovrlib.ble.BluetoothLeService"/>

	<uses-permission android:name="android.permission.WRITE_SETTINGS"/> 
	<uses-permission android:name="android.permission.BLUETOOTH" /> 
	<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/> 
	<uses-permission android:name="android.permission.INJECT_EVENTS"/>
