.. _5 	SDK Usage:
	
5 	SDK Usage
============================================

The following subsections describe how to use the SDK for the various Pico hardware products. 

5.1	Pico Goblin/G2/G2 4K
--------------------------------------------------

5.1.1 	Implementing Head Tracking and Stereo Rendering
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Note**: Follow the steps in Section 4 - Quickstart before continuing.
To support head tracking and stereo rendering, set the Head Pose and Hand Pose to Three Dof:

.. image:: _static/5.1.png

Figure 5.1 Setting the Tracking Options

**Note**: Pico Viewer does not support a controller or 6DoF.

5.1.2 	Using a Single Controller Prefab
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Note**: Pico Viewer does not support a single controller prefab.

A single controller is currently supported on the Pico Goblin, Pico Goblin2, and Pico Goblin2 4K. Use the following steps to configure Pico with a single controller in Unity:

1.	Expand **Assets** > **Pvr_Controller** > **Prefabs**.

2.	Place the **PvrController0** prefab into the scene as the child **Game Object** of **Pvr_UnitySDK** at the same level as **Head**:

.. image:: _static/5.2.png

Figure 5.2 Location for the PvrController0 prefab.

3.	Expand **Assets** > **Pvr_Controller** > **Prefabs**. 

4.	Place **ControllerManager** into the scene. 

5.	Attach **PvrController0** to the **Pvr_Controller** script of **ControllerManager**.

6.	Attach the toast in **Goblin_Controller** to the **Pvr_ControllerManager** script:

.. image:: _static/5.3.png

Figure 5.3 Configuring ControllerManager.


5.1.3 	Using the Keys and Touchpad of Single Controllers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To use the keys and touchpad of a 3DoF controller, you must invoke the controller-related APIs described in Section 6.

This section outlines the relationships between the physical controller keys and the key codes defined by the API.

Table 1 shows the key codes that correspond to the Goblin controller’s physical keys:

Table 1 - Key codes corresponding to the physical buttons of the Goblin controller.

================================       ===============================
Goblin controller key                  Input binding
================================       ===============================
.. image:: _static/5.1.3.1.png         Pvr_KeyCode.APP
.. image:: _static/5.1.3.2.png         Pvr_KeyCode.TOUCHPAD
.. image:: _static/5.1.3.3.png         Pvr_KeyCode.HOME
.. image:: _static/5.1.3.4.png         Pvr_KeyCode.VOLUMEUP
.. image:: _static/5.1.3.5.png         Pvr_KeyCode.VOLUMEDOWN
================================       ===============================

Table 2 shows the key codes that correspond to the Goblin2 controller’s physical keys:

Table 2 - Key codes corresponding to the physical buttons of the Goblin2 and Goblin2 4K controller. All elements are the same as the Pico Goblin controller except for the following two items:

================================       ===============================
G2 controller key                      Input binding
================================       ===============================
.. image:: _static/5.1.3.6.png         Pvr_KeyCode.APP
.. image:: _static/5.1.3.7.png         Pvr_KeyCode.TRIGGER
================================       ===============================

Figure 5.4 shows the values for the x and y axes of the touchpad:

.. image:: _static/5.7.png

Figure 5.4 Touchpad Diagram

**Note**: The swipe function of the controller detects the end of the swipe when the finger is lifted.


5.2	Pico Neo/Neo 2
------------------------


5.2.1 	Implementing Head Tracking and Stereo Rendering
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Note**: Follow the steps in Section 4 - Quickstart before continuing.

Pico Neo supports multiple tracking methods. Follow the steps below to configure support for this:

1.	Expand the **Pvr_UnitySDK** prefab and switch to its **Details** panel:

.. image:: _static/5.8.png

Figure 5.5 Switching tracking options of Pvr_Unity SDK Manager.

2.	Configure the options:

*	**Head Recenter**: When **Head Pose** is set to **Six Dof**, you can only reset its position by enabling **Six Dof Head Recenter**; otherwise a long press of the **Home** key can only reset a controller pose.

*	**Show SafePanel**: When enabled, the **Safe** panel will be shown when the game starts.

*	**Head Pose**: Can be set as follows:

	*	**Three Dof**: Head tracking is 3DoF for tracking poses only; not position.

	*	**Six Dof**: Head tracking is 6DoF for both poses and position.

*	**Hand Pose**: Can be set as follows:

	*	**Three of**: Hand tracking is 3DoF. This tracks poses, but the position is computed based on the head pose and the data of the controller sensor. The tracking scope is limited. 

	*	**Six DoF**: Hand tracking is 6DoF. Both poses and positions are tracked.

*	**Position ScaleFactor**: The ratio of movement, which is the ratio of moving distance in reality and moving in the scene. The default ratio is 1:1.

*	**Use Default Safe Radius**: The radius of the safe area. The default is 0.8 meters. There will be area prompts and visual darkening effects beyond the safe range.

**Note**: If you want to customize the radius of the safe region, you first need to change ``defaultRange=true`` in ``pvr_unitysdkmanager.cs`` to ``false``, after which **Use Default Range** will be enabled. You can then enter the range of safe areas.


.. image:: _static/5.9.png

Figure 5.6 Defining security zone settings.


5.2.2 	Using a Double Controller Prefab
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Follow the steps below to use dual controllers:

1. Place **PvrController0** and **PvrController1** prefabs under **Pvr_UnitySDK**, at the same level as **Head**:

.. image:: _static/5.10.png

Figure 5.7 - Double controller prefab Hierarchy.

2. Place a **ControllerManager** prefab into the scene, then enter ``PvrController0``, ``PvrController1`` for **Pvr_Controller** in **ControllerManager**:

.. image:: _static/5.11.png

Figure 5.8 ControllerManager Details Panel

To use the controller keys, invoke the controller-related interface APIs described in Section 6.3.


5.2.3 	Using Double Controller Keys and the Touchpad
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To use double controller keys and the touchpad, invoke the APIs described in Section 6.3. Table 3 shows the correspondence between the physical controller keys and the key codes defined by the API:

Table 3 - Key codes corresponding to the physical buttons of the Neo Controller.


================================       ===============================
Keys                                   Input event
================================       ===============================
.. image:: _static/5.2.3.1.png         Pvr_KeyCode.APP
.. image:: _static/5.2.3.2.png         Pvr_KeyCode.TOUCHPAD
.. image:: _static/5.2.3.3.png         Pvr_KeyCode.HOME
.. image:: _static/5.2.3.4.png         Pvr_KeyCode.VOLUMEUP
.. image:: _static/5.2.3.5.png         Pvr_KeyCode.VOLUMEDOWN
.. image:: _static/5.2.3.6.png         Pvr_KeyCode.HOME
.. image:: _static/5.2.3.7.png         Pvr_KeyCode.APP
.. image:: _static/5.2.3.8.png         TriggerValue
================================       ===============================

**Note**: The Neo touchpad is identical to the Goblin handle and will not be repeated here.



5.3 	Pico Viewer
------------------------------------

5.3.1	Implementing Head Tracking and Stereo Rendering
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Note**: Follow the steps in Section 4 before continuing.

Put the **Pvr_UnitySDK** precast into the scene. 

Note that Pico Viewer does not support the following options:

*	Show SafePanel
*	Head Pose
*	Hand Pose
*	6DoF Position Reset
*	Use Default Range

.. image:: _static/5.3.1.1.png

Figure 5.9 Options not supported by Pico Viewer.


5.3.2	Additional Information
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following are additional details about the Pico Viewer:

*	**Loading**: The default application starts the loading function in the SDK.
*	**AndroidManifest**: The Android Manifest defines the permissions required for the SDK including Activity, service, etc.
*	**Unity Version Issues**: For unity2017.2.0f3, the build and run function cannot be used when packaging.


5.4	Pico All-in-one Key
-----------------------------

The following table lists the mappings between the physical keys of the head mounted display (HMD) and Unity’s input keys:

Table 4 – Mappings between the HMD’s physical keys and Unity’s input keys. 


============================     ======================================================================
HMD Key                          Input Key of Unity
============================     ======================================================================
Return Key                       KeyCode.Escape
OK Key                           KeyCode.JoystickButton0
HOME Key                         KeyCode.Home (system occupied, not open by default)
Volume Up Key                    Android standard VOLUME_UP (system occupied, not open by default)
Volume Down Key                  Android standard VOLUME_DOWN (system occupied, not open by default)
============================     ======================================================================
 





