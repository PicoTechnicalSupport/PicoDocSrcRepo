.. _7 	Payment System:

7 	Payment System
============================

Pico Pay is a game currency payment system. It’s based on the Pico account system and is settled according to the current game currency unit (P coin) under Pico. You can use Pico Pay if your project needs an in-app-purchase system. The following subsections describe Pico Pay in more detail.

7.1 	Preparing to Use Pico Pay
----------------------------------------------

Use the following steps to integrate the payment SDK:

1.	Log in to the developer platform at http://dev.picovr.com/ and register as a Pico member.

2.	Apply to be an *individual* or *enterprise* developer. Once your submission is reviewed, we’ll provide feedback within three working days. Please check on the status of your submission on the developer platform within this time frame.

3.	Check the merchant ID. After becoming a developer, click on the nickname in the upper right corner to view the developer ID, which will be your unique merchant ID for the payment system:

.. image:: _static/8.1.png

Figure 7.1 Checking the Merchant ID

4.	Obtain the corresponding strings.

5.	Enter the application creation step from the administration screen. Click the button to create an application and select a platform to publish to:

.. image:: _static/7.1a.png

Figure 7.2 Selecting a Platform to Publish the App to.

6.	Complete the app-related information for the corresponding platform:

.. image:: _static/8.2.png

Figure 7.3 Entering the App-related Information

Enter the values for each field carefully because the app type cannot be modified once completed. If there exists an inside-props payment in your application, you must use the developer backend to add a merchandise code for unified management.

7.1.1 	Description of Payments
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Pico currently has two types of payment methods: *P currency payment (application type)*, and *commodity code payment (game type)*. An application can only use one of the two payment methods.
After the app has been created successfully, the developer platform will assign it a number of strings including an ``APPID``, ``APP KEY``, ``APP Secret``, and a developer ID:

.. image:: _static/8.3.png

Figure 7.4 APP ID, APP KEY, APP Secret

Merchandise codes have the following attributes:

*	The first character is a letter.
*	Only letter and number symbols are allowed.
*	The code can have up to 20 symbols.
*	Codes for different props cannot be duplicated. 

7.1.2 	Use Payment Strings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This SDK includes a pre-populated ``AndroidManifest.xml`` file. If your project doesn’t already have an ``AndroidManifest.xml`` file, you can use the file from this SDK directly. If your project already has an ``AndroidMaifest.xml file``, consolidate the following elements into your file:

7.1.2.1	Required Permissions:

.. code-block:: xml

    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

7.1.2.2	Developer Information (Domestic)

.. code-block:: xml

    <!--APPID-->
    <meta-data
        android:name="pico_app_id"
        android:value="APP ID"/>		//Replace APP ID with the APPID applied by the application
    <!--APPKEY-->
    <meta-data
        android:name="pico_app_key"
        android:value="APPK EY"/>		//Replace APP KEY with APPKEY applied by the application
    <!--Authorization Scope-->
    <meta-data
        android:name="pico_scope"
        android:value="SCOPE"/>		//Replace the SCOPE with the fixed value get_user_info
    <!--Developer ID-->
    <meta-data
        android:name="pico_merchant_id"
        android:value="DEVELOPER ID"/>		//Replace DEVELOPER ID with the Developer's DEVELOPER ID
    <!--Payment Key-->
    <meta-data
        android:name="pico_pay_key"
        android:value="APP SECRET"/>		//Replace APP SECRET with APPSECRET applied by the application
    

7.1.2.3	Developer Information (Foreign)

.. code-block:: xml

    <!--APPID-->
    <meta-data
        android:name="pico_app_id_foreign"
        android:value="APP ID"/>
    <!--APPKEY-->
    <meta-data
        android:name="pico_app_key_foreign"
        android:value="APPK EY"/>
    <!--授权范围-->
    <meta-data
        android:name="pico_scope_foreign"
        android:value="SCOPE"/>
    <!--开发者ID-->
    <meta-data
        android:name="pico_merchant_id_foreign"
        android:value="DEVELOPER ID"/>
    <!--支付Key-->
    <meta-data
        android:name="pico_pay_key_foreign"
        android:value="APP SECRET"/>


**Note**: The blocks of information within the developer information section can be populated according to your engineering needs. 

Populate ``pico_app_id/pico_app_id_foreign`` and ``pico_app_key/pico_app_key_foreign`` with the strings obtained from Pico. For the ``pico_merchant_id/pico_merchant_id_foreign`` and ``pico_pay_key/pico_pay_key_foreign``, enter the values shown in the examples above if you haven’t received official values from Pico.

**Note**: In this configuration file, ``pico_pay_key/pico_pay_key_foreign`` corresponds to the App Secret from the developer platform.

7.2 	Using the Payment System
------------------------------------

We have provided a demo of the payment system workflow. Expand **Assets** > **Pvr_Payment** > **Demo** > **Scenes** and open the **Demo** scene:

.. image:: _static/8.6.png

Figure 7.5 Payment Demo

As illustrated in Figure 7.5, the top portion of the button represents the method to invoke and the bottom portion shows the callback method. 

Note:

*	There is a ``PicoPayment`` prefab in the **Prefabs** directory used for system callbacks. Ensure that you have added this object to your project.
*	Some of the callback data bound to the ``Callback`` script in Pico Payment has been pre-processed. If you need to process other data, modify the content of the corresponding functions, leaving the function names unchanged.

7.3 	Payment System API Reference
----------------------------------------

7.3.1 	Login
^^^^^^^^^^^^^^^^^^^^^

7.3.1.1 	Function

``void Login()``

Logs the user in. 

**Parameters**

None

**Returns**

Nothing

7.3.1.2 	Callback

``void LoginOrUserInfoCallback(string LoginOrUserInfo)``

Returns information about the login status. The LoginOrUserInfo parameter contains JSON with the following fields:

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``isSuccess``                          ``string``                            Set to ``true`` if the login was successful, or ``false`` if the login was not successful.
``msg``                                ``string``                            Information about the login status.
================================       ===============================       ===============================

**Examples**

Success Example:

.. code-block:: json

	{ 
	   "isSuccess":"true",
	   "msg":"SUCCESS"
	}

Failure Example:

.. code-block:: json

	{
	   "isSuccess":"false", 
	   "msg":"Network exception"
	}

7.3.2	Payment
^^^^^^^^^^^^^^^^^^^^^

7.3.2.1	Function

``void Pay(string payOrderJson)``

Performs a pay operation. Populate the payOrderJson parameter with the following fields:

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``subject``                            ``string``                            The subject of the order.
``body``                               ``string``                            A description of the order.
``order_id``                           ``string``                            The ID of the order generated by the developer. Can be up to 64 characters in length.
``total``                              ``string``                            The total price of goods. Set to an integer greater than 0. The ``total`` is used for direct payment but not for payment of a commodity code.
``goods_tag``                          ``string``                            The commodity label.
``pay_code``                           ``string``                            The product code, which must be consistent with the developer platform configuration. This value must be entered for direct payment, but not when paying by the product code.
================================       ===============================       ===============================

**Returns**

Nothing

**Examples**

Example 1 – Direct Pay

.. code-block:: json

	{ 
	   "subject":"Game ",
	   "body":"Buy a complete game",
	   "order_id":"10000",
	   "total":"10",
	   "goods_tag":"game"
	}

Example 2 – Using a merchandise code to pay

.. code-block:: json

	{
	   "subject":" Game", 
	   "body":"Buy a complete game", 
	   "order_id":"10000",
	   "goods_tag":"game",
	   "pay_code":"123"
	}

**Note**: Example 1 uses direct pay and Example 2 uses a merchandise code to pay. These two payment methods cannot be carried out at the same time. A merchandise code cannot be entered for direct
payment and the ``total`` property cannot be filled out or set to 0 when using a merchandise code. In addition, these two payment methods must be consistent with the payment type configured in the developer platform accounts.

**Note**: ``order_id`` is unique in the payment system. To ensure a single user's order number is unique on the same app, it must be named in the form of ``openID+<custom order number>``.

7.3.2.2	Callback

Returns information about a payment. The ``queryOrPayInfo`` parameter contains JSON with the following fields:

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``code``                               ``string``                            A code identifying the payment status.
``msg``                                ``string``                            A message describing the payment status.
================================       ===============================       ===============================

The following table lists the codes and their corresponding messages:

======================   ==============================================
Code	                 Msg
======================   ==============================================
11001	                 USER_NOT_LOGIN_OR_EXPIRED
11004	                 MISSING_APP_PARAMETERS
12000	                 PAY_SUCCESS
12002	                 ENTER_AMOUNT_ERROR
12003	                 PCOIN_NOT_ENOUGH
12006		             NOT_ENTER_ORDER_INFO
12007                    PAY_ORDER_EXIST
12008         		     PAY_CODE_NOT_EXIST
12009                    PAY_CODE_ALERADY_CONSUMED
14001                    SDK_LOCAL_ERROR
14004                    NETWORK_ERROR
15001                    SYSTEM_ERROR
15003                    SERVICE_APP_PARAMETER_NOT_MATCH
======================   ==============================================


7.3.3	QueryOrder
^^^^^^^^^^^^^^^^^^^^^

7.3.3.1	Function

``void QueryOrder(string orderId)``

Queries for information about an existing order.

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``orderId``                            ``string``                            The ID of an order to query.
================================       ===============================       ===============================

**Returns**

Nothing

7.3.3.2	Callback

``void QueryOrPayCallback(string queryOrPayInfo)``

Returns information about the order. The ``queryOrPayInfo`` parameter contains JSON with the following fields:

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``code``                               ``string``                            Specifies the result of the operation. If the value of this field is ``13000``, then msg contains information about the order. If the value of this field is another value, then an error occurred and msg contains a description of the error.
``msg``                                ``string``                            If code is ``13000``, this field contains information about the order as shown in the table below. If code is another value, then this field provides a description of the error.
================================       ===============================       ===============================

Sub-fields of ``msg`` when ``code`` is set to ``13000``:

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``trade_no``                           ``string``                            The Pico Pay order number.
``open_id``                            ``string``                            The user ID.
``ret_msg``                            ``string``                            A message related to the payment.
``coupon_fee``                         ``float``                             The coupon fee.
``fee_type``                           ``string``                            The fee type.
``pay_time``                           ``long``                              The time that the payment completed.
``nonce_str``                          ``string``                            A nonce.
``out_trade_no``                       ``string``                            
``trade_status``                       ``string``                            Will be set to ``SUCCESS`` if the payment succeeded.
``result_code``                        ``string``                            
``mch_id``                             ``string``                            The company ID.
``ret_code``                           ``string``                            A return code.
``sub_msg``                            ``string``                            
``total_fee``                          ``float``                             The total amount of the order.
``app_id``                             ``string``                            The application’s ID.
``sub_code``                           ``string``                            
``receipt_fee``                        ``string``                            The fee received.
``buyer_pay_fee``                      ``string``                            The fee that the buyer paid.
================================       ===============================       ===============================


The following table lists the error codes and their corresponding messages:

======================   ==============================================
Code	                 Msg
======================   ==============================================
11001	                 USER_NOT_LOGIN_OR_EXPIRED
13000		             QUERY_ORDER_SUCCESS
13003	                 NOT_ENTER_ORDER_ID
13006	                 QUERY_ORDER_NOT_EXIST
14001                    SDK_LOCAL_ERROR
14004	                 NETWORK_ERROR
15001	                 SYSTEM_ERROR
15003	                 SERVICE_APP_PARAMETER_NOT_MATCH
======================   ==============================================

**Examples**

Success Example:

.. code-block:: json

	{ 
	   "trade_no":"22016082314719505878171324",
	   "open_id":"4f3148bdc34d9bca104927729a173b64",
	   "ret_msg":"",
	   "coupon_fee":0.00,
	   "fee_type":"PIC",
	   "pay_time":1471950587000,
	   "nonce_str":"yiUzuv4VQO1OXBAzVyZSRztOmRgIOioT",
	   "out_trade_no":"12345678903",
	   "trade_status":"SUCCESS",
	   "trade_type":"EGG",
	   "result_code":"SUCCESS",
	   "mch_id":"company_id",
	   "ret_code":"SUCCESS",
	   "sub_msg":"OK",
	   "total_fee":100.00,
	   "app_id":"bf18ac2de375095d63428134e44d1867",
	   "sub_code":"SUCCESS",
	   "receipt_fee":100.00,
	   "buyer_pay_fee":100.00
	}

Failure Example:

.. code-block:: json

	{ 
	   "code ":"13006",
	   "msg":"Order does not exist"
	}

7.3.4	GetUserAPI
^^^^^^^^^^^^^^^^^^^^^

7.3.4.1	Function

``void GetUserAPI()``

Returns information about the user. 

**Parameters**

None

**Returns**

Nothing

7.3.4.2	Callback

``void UserInfoCallback (string userInfo)``

Returns information about the user. The ``userInfo`` parameter contains JSON with the following fields:

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``ret_code``                           ``string``                            Specifies the result of the operation. If the value of this field is ``0000``, then data contains information about the user. If the value of this field is ``5000``, then an error occurred and ``ret_msg`` contains a description of the error.
``data``                               Object                                Contains user information as described in the table below.
``ret_msg``                            ``string``                            Information about the login status.
================================       ===============================       ===============================


Sub fields of data when ret_code is set to ``0000``:

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``aboutme``                            ``string``                            A description of the user.
``birthday``                           ``long``                              The user’s birthday.
``phone``                              ``string``                            The user’s phone number.
``username``                           ``string``                            The user’s username.
``email``                              ``string``                            The user’s email address.
``gender``                             ``string``                            The user’s gender.
``lastname``                           ``string``                            The user’s last name.
``openid``                             ``string``                            The user’s ID.
``firstname``                          ``string``                            The user’s first name.
``avatar``                             ``string``                            A link to the user’s avatar image.
``name``                               ``string``                            The user’s name.
``country``                            ``string``                            The user’s country.
``city``                               ``string``                            The user’s city.
================================       ===============================       ===============================


**Examples**

Success Example:

.. code-block:: json

	{ 
	   "ret_code":"0000",
	   "data":{ 
	      "aboutme":"",
	      "birthday":1460476800000,
	      "phone":"13100000000",
	      "username":"Admin",
	      "email":"",
	      "gender":"male",
	      "lastname":"",
	      "openid":"4f3148bdc34d9bca104927729a173b64",
	      "firstname":"",
	      "avatar":"http://172.31.83.11/upload/6dd6ee103714e967846c3d38ae48d511",
	      "Name":"14a25d7219d8dfc91e55f63286ae5c0a",
	      "country":"China",
	      "city":""
	   },
	   "ret_msg":"Call succeeded"
	}

Failure Example:

.. code-block:: json

	{ 
	   "ret_code":"5000",
	   "ret_msg":" SYSTEM_ERROR "
	}

7.4     Developer Server Interactions
------------------------------------------

When payment completes, the pay system will send the corresponding pay result and user information to the merchant. The merchant then needs to process the data received and return a response.

If the response the payment system receives from the merchant does not indicate success or a timeout, the payment system will treat the response as a failure and the payment system will periodically resend notifications in an attempt to get a response that indicates success.

The same notification may be sent to the merchant system many times and the merchant system must be able to process repeated notifications correctly. When receiving a notification for processing, check the status of the corresponding business data to determine if a notification has been processed already. Process it if it hasn’t and return a success response. Before checking and processing  business data, use a data lock for concurrency control caused by function reentry.

The merchant’s server must implement the following interface to receive the requests from the Pico server and to get payment results and user information from the Pico payment system.

**Request**

``POST /Pay``

**Body Parameters**

================================       ===============================       ===============================        ===============================
Field                                   Type                                 Required                               Description
================================       ===============================       ===============================        ===============================
``ret_code``                           ``string``                            Yes                                    The communication identifier. Will be set to ``SUCCESS`` or ``FAIL``. **Note**: This is not a trade identification. The ``result_code`` is used to determine whether a trade was successful.
``ret_msg``                            ``string``                            No                                     Indicates the reason for an error.
``sub_code``                           ``string``                            No                                     An error code.
``sub_msg``                            ``string``                            No                                     A description of the error.
``trade_no``                           ``string``                            Yes                                    Pico payment order number. 
``out_trade_no``                       ``string``                            Yes                                    The internal order number from the merchant system.
``app_id``                             ``string``                            Yes                                    The ``APP_ID`` that the platform has audited. 
``mch_id``                             ``string``                            Yes                                    The merchant ID that has been assigned to the payment.
``open_id``                            ``string``                            Yes                                    The unique ID of the user under the merchant’s appID.
``device_id``                          ``string``                            No                                     The ID of the terminal device.
``nonce_str``                          ``string``                            Yes                                    A random string, less than 32 characters in length. Use of a random number generation algorithm is recommended to generate this value.
``signature``                          ``string``                            Yes                                    See details in the name generation algorithm described in Section 7.4.1.
``result_code``                        ``string``                            Yes                                    The result of the operation. Can be set to ``SUCCESS`` or ``FAIL``. 
``trade_type``                         ``string``                            Yes                                    The payment type.
``fee_type``                           ``string``                            Yes                                    The currency type.
``total_fee``                          ``string``                            Yes                                    The total amount for the order.
``receipt_fee``                        ``string``                            Yes                                    The actual fee.
``buyer_pay_fee``                      ``string``                            No                                     The amount of the fee that the buyer paid.
``coupon_fee``                         ``string``                            No                                     The voucher or discount amount.
``attach``                             ``string``                            No                                     Merchant packets, returning as-is.
``pay_time``                           ``string``                            Yes                                    The time when the payment completed, in the form of “yyyy-MM-dd  HH:mm:ss”.
================================       ===============================       ===============================        ===============================

**Response Fields**

================================       ===============================       ===============================
Field                                   Type                                 Description                       
================================       ===============================       ===============================
``ret_code``                           ``string``                            Will be set to ``SUCCESS`` if the merchant has successfully received the notification and has validated, or ``FAIL`` if the operation failed.                         
``ret_msg``                            ``string``                            The return message. If populated, the message contains the reason for the error (e.g. “name failed - parameter format validation error”).                                                   
================================       ===============================       ===============================

**Note**: The merchant system must validate the Name field in the payment result notification contents, in order to avoid a loss of funds caused by a “fake notification” due to a data leakage.



7.4.1   Name Validation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To validate the name:

1.  Remove the Name parameter from the list of parameters returned.
2.  Add ``“key = “app_secret”, value=paykey”``.
3.  Perform a natural sort according to the value of “key”.
4.  Use & to separate multiple parameters.
5.  Encrypt the value using MD5 encryption.
6.  Compare the encrypted string with the name you obtained. 

The following shows an example validation function:

.. code-block:: java

    /** 
    * result: the map collection of retrieved data  
    * paykey: It’s the paykey on the developer platform 
    */ 
    public static String createSign(Map<String, Object> result, String paykey) 
    { 
        if (result == null || result.size() == 0) 
            return null; 
        result.put("app_secret", paykey); //1.Add key = “app_secret”, value=payke  
        String sign = result.get("Name");//2.Save Name value, to be used for validation  
        result.remove("Name"); //3.remove Name parameter  
        String[] tmp = new String[result.size()]; 
        int i = 0; 
        for (String key : result.keySet()) 
        { 
            tmp[i++] = key; 
        } 
        Arrays.sort(tmp); //4.natural sort 
        String signTemp = ""; 
        for (String string : tmp) 
        { 
            if (result.get(string) == null) 
                continue; 
            signTemp += string + "=" + URLEncoder.encode(result.get(string).toString() 
                , "utf-8") + "&"; 
        } 
        if (signTemp.endsWith("&")) 
            signTemp = sign.substring(0, signTemp .length() - 1); 
        Log.i(TAG, "createSign: " + signTemp ); 
        String localSign = MD5.MD5(sign); //5.generate MD5 encrypted string  
        return localSign.equal(sign);//6.validate with “sign” in 2  

    }


