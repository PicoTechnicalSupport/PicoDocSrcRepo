.. _6 	API interface function list:

6 	API interface function list
======================================

6.1 	Get version information
-------------------------------------

UPvr_GetUnitySDKVersion
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static string UPvr_GetUnitySDKVersion()``

Returns the SDL version Number.

**Namespace**

``Pvr_UnitySDKAPI.System``

**Parameters**

None.

**Returns**

The version number of the SDK.


6.2 	Sensor tracking related
-------------------------------------


6.2.1	UPvr_StartSensor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static int UPvr_StartSensor(int index)``

Enables sensor tracking.

**Namespace**

``Pvr_UnitySDKAPI.Sensor``

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``index``                              32-bit Integer                        The sensor to enable tracking for. Set to ``0`` for the main sensor, or ``1`` for the subsidiary sensor. The main sensor is the HMD (head tracking) sensor of Pico Viewer, Pico Neo, and Goblin, Goblin2. Pico Viewer does not have a subsidiary sensor.
================================       ===============================       ===============================

**Returns**

``0`` if the function succeeded or ``1`` if the function failed.


6.2.2	UPvr_ResetSensor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static int UPvr_ResetSensor(int index)``

Resets sensor tracking.

**Namespace**

``Pvr_UnitySDKAPI.Sensor``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``index``                              32-bit Integer                        The sensor to reset tracking for. Set to ``0`` for the main sensor, or ``1`` for the subsidiary sensor. 
================================       ===============================       ===============================

**Note**: Pico Viewer resets the sensor to track the horizontal direction.

**Returns**

``0`` if the function succeeded or ``1`` if the function failed.


6.2.3	Upvr_OptionalResetSensor 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool Upvr_OptionalResetSensor(int index, int resetRot, int resetPos)``

Resets the sensor’s rotation and position.

**Namespace**

``Pvr_UnitySDKAPI.Sensor``

**Parameters**

Name	Type	Description

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``index``                              32-bit Integer                        The sensor to reset tracking for. Set to ``0`` for the main sensor, or ``1`` for the subsidiary sensor. 
``resetRot``	                       32-bit Integer                        Set to ``1`` to reset the rotation, or ``0`` to not reset the rotation. 
``resetPos``	                       32-bit Integer                        Set to ``1`` to reset the position, or ``0`` to not reset the position.
================================       ===============================       ===============================

**Returns**

**true** if the function succeeded or **false** if the function failed.


6.3 	Controller Functions
-------------------------------------

6.3.1	UPvr_GetControllerPower
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static int UPvr_GetControllerPower(int hand)``

Gets the battery level of a controller.

**Namespace**

``Pvr_ControllerAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit Integer                        Specifies the controller from which to get the battery level. For Goblin, G2, and G2 4K, pass ``0``. For Pico Neo, pass ``0`` for the first bound controller or ``1`` for the second bound controller.
================================       ===============================       ===============================

**Returns**

For Goblin and Goblin2 the battery level returned is 0 through 4. For Pico Neo, the battery level returned is 1 through 9.

6.3.2	changeMainControllerCallback
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void changeMainControllerCallback (string index)``

A callback that is invoked when the main controller is changed.

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``index``                              ``String``                            Indicates which controller has been switched to be the main control controller. Will be set to either ``0`` or ``1``. The main control controller is a controller that enables the beam, participates in the user interface interaction, and has no specific relationship with the index of the controller.
================================       ===============================       ===============================

**Returns**

Nothing

6.3.3	UPvr_GetControllerAbility
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static int UPvr_GetControllerAbility(int hand)``

Gets the Pico Neo controller’s support for 3Dof/6Dof.

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               ``String``                            Indicates which hand is switched to be the main control controller. Set to ``0`` or ``1``. The main control controller is a controller that enables the beam, participates in the UI interaction, and has no specific relationship with the index of the controller.
================================       ===============================       ===============================

**Returns**

``0`` if the call failed, ``1`` if the controller supports 6Dof, or ``2`` if the controller supports 3Dof.


6.3.4	setControllerStateChanged
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void setControllerStateChanged(string state)``

A callback that is invoked when the connection status of a Pico Neo controller has changed.

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``state``                              ``String``                            A string indicating the connection status. The first number is the index number of the controller and the second number is the connection status of the controller. The two numbers are separated by a comma. For example: ``0,0`` means that controller 0 is disconnected, and ``0,1`` means controller 0 is connected.
================================       ===============================       ===============================

**Returns**

Nothing


6.3.5	UPvr_GetControllerState
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static ControllerState UPvr_GetControllerState(int hand)``

Gets the connection status of a Pico controller. 

**Note**: When only one controller is connected to a Pico Neo device, it’s recommended that this function be invoked twice, passing 0 and 1 in the respective calls, since the index of the controller cannot be determined ahead of time.

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               ``String``                            The controller from which to get the state. For Goblin, G2, and G2 4K, pass ``0``. For  Pico  Neo  pass  ``0`` or ``1`` for the respective controller.
================================       ===============================       ===============================


**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Returns**

A ``ControllerState`` containing the controller’s connection status.


6.3.6	ResetController
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void ResetController(int num)``

Resets the pose for a controller.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``num``                                32-bit Integer                        The index of the controller for which to perform the reset. For Goblin, G2, and G2 4K, pass ``0``. For Pico Neo, set to ``0`` or ``1`` for the respective controller. Set to ``0`` if there is only one controller or a 3DoF controller in use.
================================       ===============================       ===============================

**Returns**

Nothing

6.3.7	StartUpgrade
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static bool StartUpgrade()``

Starts an upgrade.

**Namespace**

``Pvr_ControllerManager``

**Parameters**

None

**Returns**

``true`` if the function succeeded or ``false`` if the function failed.

6.3.8	GetBLEVersion
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static long GetBLEVersion()``

Gets the BLE version number. 

**Note**: Not applicable to G2/G2 4K.

**Namespace**

Pvr_ControllerManager


**Parameters**

None

**Returns**

The BLE version number.


6.3.9	setupdateFailed
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void setupdateFailed()``

A callback that is invoked when an upgrade fails. You can either add logic directly within this method or use a delegate to perform the call.

**Namespace**

``Pvr_ControllerManager``


**Parameters**

None

**Returns**

Nothing.


6.3.10	setupdateSuccess
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void setupdateSuccess()``

A callback that is invoked when an upgrade succeeds. You can either add logic directly within this method or use a delegate to perform the call. 

**Note**: Not applicable to G2/G2 4K.

**Namespace**

``Pvr_ControllerManager``

**Parameters**

None

**Returns**

Nothing.

6.3.11	setupdateProgress
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void setupdateProgress(string progress)``

A callback that is invoked during an upgrade process to provide the current progress. You can either add logic directly within this method or use a delegate to perform the call.

**Namespace**

``Pvr_ControllerManager``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``progress``                           ``string``                            The current progress. Will be set to a value from 0 through 100 to indicate the percentage complete.
================================       ===============================       ===============================

**Returns**

Nothing.


6.3.12	UPvr_GetControllerQUA
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static Quaternion UPvr_GetControllerQUA(int hand)``

Gets the pose for a controller.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The controller from which to get the pose. For Goblin, G2, and G2 4K, set to ``0``. For Pico Neo, set to ``0`` or ``1`` for the respective controller. 
================================       ===============================       ===============================

**Returns**

A Quaternion containing the pose for the controller.

6.3.13	UPvr_GetControllerPOS
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static Vector3 UPvr_GetControllerPOS (int hand)``

Gets the position of a controller.

**Note**: This function is only applicable for the Pico Neo.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The controller from which to get the position. For Goblin, G2, and G2 4K, set to ``0``. For Pico Neo, set to ``0`` or ``1`` for the respective controller. 
================================       ===============================       ===============================

**Returns**

A ``Vector3`` containing the position for the controller.


6.3.14	UPvr_GetMainHandNess
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static int UPvr_GetMainHandNess()``

Gets the index of the controller that is currently set as the main controller.

**Note**: On the Pico Neo this function can only return the correct value after the bind service has succeeded. The SDK will start the Bind Controller service when the app starts. We recommend that developers check if the bind has first succeeded using the Bind callback function.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

None

**Returns**

The index of the main controller (0 or 1).

6.3.15	UPvr_SetMainHandNess
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void UPvr_SetMainHandNess(int hand)``

Sets the main controller.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller to set as the main controller. Set to ``0`` or ``1`` for the respective controller. 
================================       ===============================       ===============================

**Returns**

Nothing

6.3.16	UPvr_GetKey
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static bool UPvr_GetKey (int hand，Pvr_KeyCode key)``

Checks if a specific key is currently pressed on a controller.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller to check. Set to ``0`` or ``1`` for the respective controller.  
``key``                                Pvr_KeyCode                           The key code specifying which physical key to check on the controller.
================================       ===============================       ===============================

**Returns**

``true`` if the specified key is currently pressed on the controller or ``false`` if the key is not currently pressed.

6.3.17	UPvr_GetKeyDown
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static bool UPvr_GetKeyDown(int hand，Pvr_KeyCode key)``

Checks if a specific key is currently pressed on a controller.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller to check. Set to ``0`` or ``1`` for the respective controller.  
``key``                                Pvr_KeyCode                           The key code specifying which physical key to check on the controller.
================================       ===============================       ===============================


**Returns**

``true`` if the specified key is currently pressed on the controller or ``false`` if the key is not currently pressed.


6.3.18	UPvr_GetKeyUp
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static bool UPvr_GetKeyUp(int hand，Pvr_KeyCode key)``

Checks if a specific key is not currently pressed on a controller.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller to check. Set to ``0`` or ``1`` for the respective controller.  
``key``                                Pvr_KeyCode                           The key code specifying which physical key to check on the controller.
================================       ===============================       ===============================


**Returns**

``true`` if the specified key is not currently pressed on the controller or ``false`` if the key is currently pressed.

6.3.19	UPvr_GetKeyLongPressed
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static bool UPvr_GetKeyLongPressed(int hand，Pvr_KeyCode key)``

Checks if a specific key is currently long pressed on a controller.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller to check. Set to ``0`` or ``1`` for the respective controller.  
``key``                                Pvr_KeyCode                           The key code specifying which physical key to check on the controller.
================================       ===============================       ===============================


**Returns**

``true`` if the specified key is currently long pressed on the controller or ``false`` if the key is not currently long pressed.


6.3.20	UPvr_IsTouching
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static bool UPvr_IsTouching(int hand)``

Checks if the touchpad on a controller is currently being touched.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller to check. Set to ``0`` or ``1`` for the respective controller.  
================================       ===============================       ===============================

**Returns**

``true`` if the touchpad is currently being touched or ``false`` if the touchpad is not currently being touched.


6.3.21	UPvr_GetSwipeDirection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static SwipeDirection UPvr_GetSwipeDirection(int hand)``

Gets the state of the sliding gesture.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller from which to get the swipe pose. Set to ``0`` or ``1`` for the respective controller.  
================================       ===============================       ===============================

**Returns**

A ``SwipeDirection`` indicating the swipe direction.

6.3.22	UPvr_GetTouchPadPosition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static Vector2 UPvr_GetTouchPadPosition(int hand)``

Gets the touch value of the touchpad.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller from which to get the touchpad value. Set to ``0`` or ``1`` for the respective controller.  
================================       ===============================       ===============================

**Returns**

The touchpad’s touch value. This value is the same for Pico Goblin and Pico Neo. 

6.3.23	UPvr_GetTouchPadClick
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static TouchPadClick UPvr_GetTouchPadClick(int hand)``

Gets the touch value click. The value is based on dividing the touchpad into four areas to simulate the up, down, left, and right functions of a game controller.

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller from which to get the touchpad click. Set to ``0`` or ``1`` for the respective controller.  
================================       ===============================       ===============================

**Returns**

A ``TouchPadClick`` indicating the current touchpad click.


6.3.24	Upvr_GetControllerTriggerValue
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static int Upvr_GetControllerTriggerValue(int hand)``

Gets the input value of the trigger. 

**Note**: This function is applicable to Goblin2 and Neo Controllers.	

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller from which to get the input value. Set to ``0`` or ``1`` for the respective controller.  
================================       ===============================       ===============================

**Returns**

The input value in the range of 0 through 255.

6.3.25	VibateController
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public void VibateController(int hand, int strength)``

Vibrates the controller.

**Namespace**

``Pvr_ControllerManager.controllerlink``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``hand``                               32-bit integer                        The index of the controller to vibrate. Set to ``0`` or ``1`` for the respective controller.  
``strength``                           32-bit integer                        The strength at which to vibrate. Can be set from 0 through 255.
================================       ===============================       ===============================


**Returns**

Nothing

6.3.26	UPvr_GetDeviceType
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static int UPvr_GetDeviceType()``

Gets the type of the connected controller. 

**Namespace**

``Pvr_UnitySDKAPI.Controller``

**Parameters**

None

**Returns**

The type of the device. Will be set to one of the following values: 

*	``0``: No connection
*	``1``: Goblin
*	``2``: Neo
*	``3``: G2, G2 4K

If the return value is ``0``, the controller connection state needs to be checked at the same time, and the two values must coincide to determine whether to enable head control.




6.4 	Battery, Volume, Brightness Services
-----------------------------------------------

6.4.1	UPvr_InitBatteryVolClass
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool UPvr_InitBatteryVolClass()``

Initializes battery, volume, and brightness services. This function must be invoked before using any of those services.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``


**Parameters**

None

**Returns**

``true`` if the function succeeded or ``false`` if the function failed.

6.4.2	UPvr_StartAudioReceiver
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool UPvr_StartAudioReceiver()``

Starts the audio service.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``


**Parameters**

None

**Returns**

``true`` if the function succeeded or ``false`` if the function failed.


6.4.3	UPvr_SetAudio
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public void UPvr_SetAudio(string s)``

Notifies Unity of the current volume when the volume changes.	

**Namespace**

This is a low-level Android call, not a Unity-level function. If you need to perform any operations when the volume changes, write the related logic in this function.

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``s``                                  ``string``                            The value of the volume after the volume has changed.
================================       ===============================       ===============================

**Returns**

Nothing

6.4.4	UPvr_StopAudioReceiver
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool UPvr_StopAudioReceiver()``

Stops the audio service.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``


**Parameters**

None

**Returns**

``true`` if the function succeeded or ``false`` if the function failed.


6.4.5	UPvr_StartBatteryReceiver
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool UPvr_StartBatteryReceiver()``

Starts the battery service.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``


**Parameters**
None


**Returns**

``true`` if the function succeeded or ``false`` if the function failed.

6.4.6	UPvr_SetBattery
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public void UPvr_SetBattery(string s)``

Notifies Unity of the current battery level when the battery level changes.	

**Namespace**

This is a low-level Android call, not a Unity-level function. If you need to perform any operations when the battery level changes, write the related logic in this function.

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``s``                                  ``string``                            The battery level. Will be set in the range of 0.00 through 1.00.
================================       ===============================       ===============================

**Returns**

Nothing


6.4.7	UPvr_StopBatteryReceiver
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool UPvr_StopBatteryReceiver()``

Stops the battery service.	

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``

**Parameters**

None

**Returns**

``true`` if the function succeeded or ``false`` if the function failed.


6.4.8	UPvr_GetMaxVolumeNumber
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public int UPvr_GetMaxVolumeNumber()``

Returns the maximum value for the volume.	

**Namespace**

Pvr_UnitySDKAPI.VolumePowerBrightness

**Parameters**

None
 
**Returns**

The maximum volume.


6.4.9	UPvr_GetCurrentVolumeNumber
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public int UPvr_GetCurrentVolumeNumber()``

Returns the current value for the volume.	

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``

**Parameters**

None

**Returns**

The current volume value in the range of 0 through 15.

6.4.10	UPvr_VolumeUp
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool UPvr_VolumeUp()``

Turns up the volume.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``


**Parameters**

None

**Returns**

``true`` if the function succeeded or ``false`` if the function failed.

6.4.11	UPvr_VolumeDown
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool UPvr_VolumeDown()``

Turns down the volume.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``

**Parameters**

None

**Returns**

``true`` if the function succeeded or ``false`` if the function failed.


6.4.12	UPvr_SetVolumeNum
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool UPvr_SetVolumeNum()``

Turns down the volume.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``volume``                             ``string``                            The volume level to set. Set to a value in the range of 0 through 15.
================================       ===============================       ===============================

**Returns**

``true`` if the function succeeded or ``false`` if the function failed.

6.4.13	UPvr_GetScreenBrightnessLevel
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static int[] UPvr_GetScreenBrightnessLevel()``

Gets the current brightness level of the screen.

**Note**: This function is applicable for Goblin only.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``


**Parameters**

None

**Returns**

An array of integers where the first element is the total brightness level supported, the second element is the current brightness level, and the remaining elements are the brightness interval values.

6.4.14	UPvr_SetScreenBrightnessLevel
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public  static void UPvr_SetScreenBrightnessLevel(int  vrBrightness, int level)``

Sets the current brightness level of the screen.

**Note**: This function is applicable for Goblin only.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``vrBrightness``                       32-bit Integer                        The brightness mode to set. Set to ``0`` to specify the system default or ``1`` to set a custom brightness level via the ``level`` parameter.
``level``                              32-bit Integer                        The brightness level to set. Set to a value in the range of 0 through 255.
================================       ===============================       ===============================

**Returns**

Nothing

6.4.15	UPvr_GetCommonBrightness
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public int UPvr_GetCommonBrightness()``

Gets the current brightness level of common devices.

**Note**: This function is applicable for Pico Neo and other regular mobile phones.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``

**Parameters**

None

**Returns**

An integer indicating the current brightness level in the range of 0 through 255.

6.4.16	UPvr_SetCommonBrightness
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public bool UPvr_SetCommonBrightness(int brightness)``

Sets the current brightness level for common devices.

**Note**: This function is applicable for Pico Neo and other regular mobile phones.

**Namespace**

``Pvr_UnitySDKAPI.VolumePowerBrightness``

**Parameters**

================================       ===============================       ===============================
Name                                   Type                                  Description
================================       ===============================       ===============================
``vrBrightness``                       32-bit Integer                        The brightness level to set. Set to a value in the range of 0 through 255.
================================       ===============================       ===============================

**Returns**

Nothing


6.5	Head-mounted Distance Sensor
-----------------------------------------------

6.5.1	UPvr_InitPsensor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void UPvr_InitPsensor()``

Initializes the distance sensor.

**Namespace**

``Pvr_UnitySDKAPI.Sensor``

**Parameters**

None

**Returns**

Nothing


6.5.2	UPvr_GetPsensorState
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static int UPvr_GetPsensorState()``

Gets the state of the head-mounted distance sensor.

**Note**: invoke ``UPvr_InitPsensor`` for initialization before invoking ``UPvr_GetPsensorState``.

**Namespace**

``Pvr_UnitySDKAPI.Sensor``

**Parameters**

None

**Returns**

``0`` if the device is currently worn on the head or ``1`` if it’s not currently worn on the head.


6.5.3	UPvr_UnregisterPsensor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void UPvr_UnregisterPsensor()``

Releases the distance sensor

**Namespace**

``Pvr_UnitySDKAPI.Sensor``

**Parameters**

None

**Returns**

Nothing


6.6	Hardware Devices
-----------------------------------------------

6.6.1	UPvr_GetDeviceMode
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static string UPvr_GetDeviceMode()``

Gets the device type.

**Namespace**

``Pvr_UnitySDKAPI.System``

**Parameters**

None

**Returns**

A ``SystemInfo.deviceModel`` containing device information.

6.6.2	UPvr_GetDeviceSN
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static string UPvr_GetDeviceSN()``

Gets the device’s serial number.

**Namespace**

``Pvr_UnitySDKAPI.System``

**Parameters**

None

**Returns**

The device’s serial number.

6.6.3	UPvr_ShutDown
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void UPvr_ShutDown()``

Powers off the device.

**Note**: Before this function can be invoked, the ``DEVICE_POWER`` permission must first be added to ``AndroidManifest.xml``:

.. code-block:: XML
	
	...
	android:sharedUserId="android.uid.system" 
	<uses-permission android:name="android.permission.DEVICE_POWER"/>


**Namespace**

Pvr_UnitySDKAPI.System

**Parameters**

None

**Returns**

Nothing

6.6.4	UPvr_Reboot
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void UPvr_Reboot()``

Reboots the device.

**Note**: Before this function can be invoked, the DEVICE_POWER permission must first be added to AndroidManifest.xml:

.. code-block:: XML

	...
	android:sharedUserId="android.uid.system" 
	<uses-permission android:name="android.permission.DEVICE_POWER"/>


**Namespace**

``Pvr_UnitySDKAPI.System``

**Parameters**

None

**Returns**

Nothing

6.6.5	UPvr_Sleep
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``public static void UPvr_Sleep()``

Turns off the screen.
**Note**: Before this function can be invoked, the DEVICE_POWER permission must first be added to AndroidManifest.xml:

.. code-block:: XML

	…
	android:sharedUserId="android.uid.system" 
	<uses-permission android:name="android.permission.DEVICE_POWER"/>

**Namespace**

``Pvr_UnitySDKAPI.System``

**Parameters**

None

**Returns**

Nothing



















































