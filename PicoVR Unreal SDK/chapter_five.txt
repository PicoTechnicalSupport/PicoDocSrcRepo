.. _5 	SDK Usage:
	
5 	SDK Usage
============================================

This chapter describes how to use the SDK with the various Pico hardware products.

5.1	Pico Goblin/G2/G2 4K Controller
--------------------------------------------------

.. image:: _static/5.1b.png

Figure 5.1 Pico Goblin Controller


5.1.1 	Set Up
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.	Add a **MotionController** component to the default **Pawn** in your project, at the same level as the **Camera**:

.. image:: _static/5.2b.png

Figure 5.2 Adding a MotionController Component

**Note:** This component is not affected by the **Hand** property. For example, if you change the left and right hands, navigate to the system settings to modify it. 

2.	Enable **Disable Low Latency Update**, so the controller model won’t twinkle as a result of the dual updates per frame:

.. image:: _static/5.3b.png

Figure 5.3 Enabling the Option: Disable Low Latency Update

After packaging and installation, the component will follow the position and orientation movements of the Pico Goblin controller.

3.	Add a model for the MotionController. 

- For UE 4.20 and higher, add the model under the **Visualization** sub-menu of the **MotionController** details panel and enable **Show Plugin Content**:

.. image:: _static/5.4b.png
 
Figure 5.4 UAE 4.20+ Pico Goblin Controller Model

**Note:** In the **plugin** directory, the handle with button animation is packaged into an Actor. If you want to reuse it, attach it to the **Pawn** or **Character** in your level.

5.1.2 	Inputs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

5.1.2.1	Buttons

The buttons used by the Goblin controller are not predefined by the engine. During development, set the input binding according to Table 1 or drive the event through the corresponding blueprint node:

Table 5.1 Pico Goblin Input Bindings

================================       ===============================       ===============================
Goblin Controller Buttons              Input Binding                         Blueprint Node
================================       ===============================       ===============================
.. image:: _static/CB1.png             .. image:: _static/IB1.png            .. image:: _static/bp1.png
.. image:: _static/CB2.png             .. image:: _static/IB2.png            .. image:: _static/bp2.png
.. image:: _static/CB3.png             .. image:: _static/IB3.png            .. image:: _static/bp3.png
.. image:: _static/CB4.png             .. image:: _static/IB4.png            .. image:: _static/bp4.png
.. image:: _static/CB5.png             .. image:: _static/IB5.png            .. image:: _static/bp5.png
================================       ===============================       ===============================

Table 5.2 Pico G2 Input Bindings. 

All elements are the same as the Pico Goblin controller except for the following two items:

================================       ===============================       ===============================
Goblin Controller Buttons              Input Binding                         Blueprint Node
================================       ===============================       ===============================
.. image:: _static/5.1.3.6.png         .. image:: _static/phb1.png           .. image:: _static/phb3.png
.. image:: _static/5.1.3.7.png         .. image:: _static/phb2.png           .. image:: _static/phb4.png
================================       ===============================       ===============================

5.1.2.2	Touchpad Axes

.. image:: _static/5.5b.png
 
Figure 5.5 Goblin Controller Touchpad Axes

**Note:** The value of the X and Y axes range from 0 to 1. This differs from the touchpad axes of Steam, Oculus, and Google devices. If there are functions related to the touchpad axes in your project, map the values that range from -1 through 1 to 0 through 1.

Use the nodes below to get the axes values:

.. image:: _static/5.6b.png
 
Figure 5.6 Nodes to Get the Touchpad Axes Values

5.1.3	Blueprint Nodes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following subsections list the blueprint interfaces of the Goblin controller.

5.1.3.1	Pico Set Controller Connected Status Changed Delegate

Specifies the delegates to invoke when the motion controller is connected and disconnected.

**Input**

- **OnPicoControllerConnected**: Invoked when the handle is (re)connected.

- **OnPicoControllerDisconnected**: Invoked when the handle is disconnected.

5.1.3.2	Pico Choose Controller Hand

Selects a suitable hand for the motion controller.

**Input**

- **Left**: Selects the left hand.

- **Right**: Selects the right hand.

5.1.3.3	Pico Switch Controller Hand

Toggles the suitable hand for the motion controller.

**Input**

None

5.1.3.4	Pico Choose Arm Model Joint

Selects the current tracking joint for the motion controller.

**Input**

- **Wrist**: Selects the wrist joint.
- **Elbow**: Selects the elbow joint.
- **Shoulder**: Selects the shoulder joint.


5.1.3.5	Pico Switch Arm Model Joint

Cycles through the wrist, elbow, and shoulder tracking joints of the current motion controller.

**Input**

None

5.1.3.6	Pico Get Controller Battery Level

Returns the power level in the range of 0 through 4, where 4 is the highest level.

**Input**

None

5.2	Pico Neo Controller
--------------------------------------------------

The Pico Neo controller consists of the main controller and a sub controller. The main controller has a ray and can interact with the user interface. When there is only one controller connected to the HMD, it is the main controller.

It’s recommended that you add a **WidgetInteraction** component on the main controller, to ensure that the same controller is always used to interact with the user interface, both in the system and in your own application.

5.2.1	Set Up
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Use the following steps to set up the Pico Neo Controller:

1.	Add two **MotionController** components to the default **Pawn** in your Scene, in the same level as the Camera:

.. image:: _static/5.7b.png
 
Figure 5.7 Adding MotionController Components

2.	Rename the **MotionController** components to **MotionController_Main** and **MotionController_Sub**.

3.	Select **MotionController_Main** and set the value of **Hand** to **Special 1** in its property panel. This enables the component to follow the main handle movement. 

4.	Select **MotionController_Sub** and set the value of **Hand** to **Special 2**:
 
.. image:: _static/5.8b.png
 
Figure 5.8 Setting the Hand Property

5.	Add a model to the **MotionController**:

- For UE 4.20 and higher, add the model under the **Visualization** sub-menu of the **MotionController** details panel and enable **Show Plugin Content**:
 
.. image:: _static/5.9b.png 

Figure 5.9 Adding a Controller Model in UE 4.20+

When using the Pico Neo 2 controller, perform the following steps:

1.	Add two **MotionController** components to the default Pawn class in the game (named as **MotionController_Left** and **MotionController_Right**), and make them the same level as the **Camera** component:
 
.. image:: _static/5.10b.png 

Figure 5.10. Addition of the MotionController Component

2.	Select **MotionController_Left**, find the Hand property in its detail panel, and modify it to **Left**:

.. image:: _static/5.11b.png 
 
Figure 5.11 Hand Property Setting

3.	Similarly, for **MotionController_Right**, its Hand property should be set as **Right**.

4.	Add a model to MotionController. 

- For UE 4.20 and higher, add the model under the **Visualization** sub-menu of the **MotionController** details panel and enable **Show Plugin Content**:
 
.. image:: _static/5.12b.png 

Figure 5.12 Controller Model Addition in UE4.20+

**Note:** In the plug-in directory, we will package the controller with the key animation into an Actor. If you want to reuse it, attach it to the Pawn or Character in your level.

5.2.2	Inputs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

5.2.2.1 Keys

The Keys used by the Pico Neo controller are not predefined by the engine. During development, set the input binding according to Table 3 or drive the event through the corresponding blueprint node:

Table 5.3 Pico Neo Input Bindings

+--------------------------------+-----------------------+-------------------------------+--------------------------------+  
| Keys                           | Input Events                                                                           |
+============+============+======+=======================+===============================+================================+ 
|                                | Main Controller       | .. image:: _static/IE5.png    | .. image:: _static/IE1.png     | 
| .. image:: _static/5.2.3.1.png +-----------------------+-------------------------------+--------------------------------+ 
|                                | Auxiliary Controller  | .. image:: _static/IE6.png    | .. image:: _static/IE2.png     | 
+--------------------------------+-----------------------+-------------------------------+--------------------------------+ 
|                                | Main Controller       | .. image:: _static/IE7.png    | .. image:: _static/IE3.png     | 
| .. image:: _static/5.2.3.2.png +-----------------------+-------------------------------+--------------------------------+ 
|                                | Auxiliary Controller  | .. image:: _static/IE8.png    | .. image:: _static/IE4.png     | 
+--------------------------------+-----------------------+-------------------------------+--------------------------------+ 
|                                | Main Controller       | .. image:: _static/IE9.png    | .. image:: _static/IE11.png    | 
| .. image:: _static/5.2.3.3.png +-----------------------+-------------------------------+--------------------------------+ 
|                                | Auxiliary Controller  | .. image:: _static/IE10.png   | .. image:: _static/IE12.png    | 
+--------------------------------+-----------------------+-------------------------------+--------------------------------+ 
|                                | Main Controller       | .. image:: _static/IE10b.png  | .. image:: _static/IE10e.png   | 
| .. image:: _static/5.2.3.4.png +-----------------------+-------------------------------+--------------------------------+ 
|                                | Auxiliary Controller  | .. image:: _static/IE10f.png  |  .. image:: _static/IE10g.png  | 
+--------------------------------+-----------------------+-------------------------------+--------------------------------+  
|                                | Main Controller       | .. image:: _static/IE10h.png  | .. image:: _static/IE10e.png   | 
| .. image:: _static/5.2.3.5.png +-----------------------+-------------------------------+--------------------------------+ 
|                                | Auxiliary Controller  | .. image:: _static/IE10i.png  |  .. image:: _static/IE10g.png  | 
+--------------------------------+-----------------------+-------------------------------+--------------------------------+  

Neo 2 needs to drive the events through the corresponding blueprint node as follows:

+--------------------------------+--------+-------------------------------+------------------------------+  
| Buttons                        | Input Events                                                          |
+================================+========+===============================+==============================+ 
|                                | Left   | .. image:: _static/IE21.png   | .. image:: _static/IE25.png  | 
| .. image:: _static/5.2.3.6.png +--------+-------------------------------+------------------------------+ 
|                                | Right  | .. image:: _static/IE22.png   | .. image:: _static/IE26.png  | 
+--------------------------------+--------+-------------------------------+------------------------------+ 
|                                | Left   | .. image:: _static/IE23.png   | .. image:: _static/IE27.png  | 
| .. image:: _static/5.2.3.7.png +--------+-------------------------------+------------------------------+ 
|                                | Right  | .. image:: _static/IE24.png   | .. image:: _static/IE28.png  | 
+--------------------------------+--------+-------------------------------+------------------------------+ 
|                                | Left   | .. image:: _static/IE24b.png  | .. image:: _static/IE29.png  | 
| .. image:: _static/5.2.3.8.png +--------+-------------------------------+------------------------------+ 
|                                | Right  | .. image:: _static/IE25b.png  | .. image:: _static/IE30.png  | 
+--------------------------------+--------+-------------------------------+------------------------------+ 



5.2.2.2 Touchpad Areas


.. image:: _static/5.13b.png 

Figure 5.13 Pico Neo Controller Touchpad Axes

Use the blueprint nodes shown below to achieve the value of the touchpad for the main and sub controllers:

.. image:: _static/5.14b.png 

Figure 5.14 Touchpad Blueprint Nodes

The value of the trigger ranges from 0 to 1 and the trigger input values of the main and auxiliary (left and right) controllers can be obtained through the following blueprint nodes:
 
.. image:: _static/5.15b.png 

Figure 5.15 Trigger Blueprint Nodes



5.2.3	Blueprint Nodes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Navigate to the **Pico Neo > Controller** in the menu and right click on it to see the APIs of the Pico Neo controller:
 
.. image:: _static/5.16b.png 

Figure 5.16 Pico Neo Controller API

The following subsections list the Blueprint interfaces of the Goblin controller.

5.2.3.1	Set Controller Connected Status Delegate

Sets the callback events to be invoked after the controller connection status has changed.

**Input**

- **OnMainControllerConnect**: Invoked when the main controller is connected.
- **OnMainControllerDisconnect**: Invoked when the main controller is disconnected.
- **OnSubControllerConnect**: Invoked when the sub controller is connected.
- **OnSubControllerDisconnect**: Invoked when the sub controller is disconnected.

5.2.3.2	Get Main Controller Battery Level

Gets the battery level of the main controller.

**Returns**

The battery level of the main controller in the range of 1 through 10.

5.2.3.3	Get Sub Controller Battery Level

Gets the battery level of the sub controller.

**Returns**

The battery level of the sub controller in the range of 1 through 10.

5.2.3.4	Is Main Controller Connected

Gets the connected state of the main controller.

**Returns**

``True`` if the controller is connected or ``False`` if the controller is disconnected.

5.2.3.5	Is Sub Controller Connect

Gets the connected state of the main controller.

**Returns**

``True`` if the controller is connected or ``False`` if the controller is disconnected.

5.2.3.6	Is Main Controller Support 6Dof

Returns whether the main controller supports 6DoF.

**Returns**

True if the controller supports 6DoF or False if the controller only supports 3DoF tracking.

5.2.3.7	Is Sub Controller Support 6Dof

Returns whether the sub controller supports 6DoF.

**Returns**

``True`` if the controller supports 6DoF or ``False`` if the controller only supports 3DoF tracking.

5.2.3.8	Pico Get Device Model

Gets the device model.

**Output**

HMD Type
